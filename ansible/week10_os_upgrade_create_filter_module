
* OS Upgrade

The below playbook can be used to transfer a routers OS version to a device for an OS upgrade. 

---
- name: Transfer image file
  hosts: do_not_run_this_playbook
  tasks:
    - debug:
        var: ansible_facts
      when: ansible_facts.net_model == "C1111-4P"

    - debug:
        msg: "bootflash:/{{ os_image_file }}"

    - name: Transfer image file
      vars:
        # Hopefully 6 hours is enough
        ansible_command_timeout: 21600
      net_put:
        src: "{{ os_image_file }}"
        dest: "bootflash:/{{ os_image_file }}"
        protocol: scp
      when: ansible_facts.net_model == "C1111-4

When you transfer an image you need to care about certain things such as is there enough disk space available. You will want to verify things like the MD5 hash and wether of not the image has been transfered. 

Here we use roles to perform the transfer

!/roles/transfer_image/tasks/main.yml

- name: Determine file-system to use.
  import_tasks: determine_filesystem.yml

- name: Verify sufficient space available on remote device.
  import_tasks: verify_space_available.yml

- name: Transfer the image file.
  import_tasks: transfer_image.yml
  tags: never

- name: Verify the remote files MD5
  import_tasks: verify_file.yml
  tags: md5

!/roles/transfer_image/tasks/determine_filesystem.yml

- name: Select the file-system to use.
  set_fact:
    dest_filesystem: "{{ ansible_facts.net_filesystems[0] }}"

- name: Display the file-system selected.
  debug:
    var: dest_filesystem

- name: Verify file_system is allowed.
  assert:
    that:
      - dest_filesystem in allowed_filesystems
    success_msg: "Using file-system: {{ dest_filesystem }}"

!/roles/transfer_image/tasks/transfer_image.yml

- name: Destination PATH
  debug:
    msg: "{{ dest_filesystem }}/{{ primary_image.name }}"

- name: Transfer image file
  vars:
    # Transfer takes forever and a half
    ansible_command_timeout: 21600
  net_put:
    src: "{{ primary_image.name }}"
    dest: "{{ dest_filesystem }}/{{ primary_image.name }}"
    protocol: scp
  when: ansible_facts.net_model == "C1111-4P"

!/roles/transfer_image/tasks/verify_file.yml

- name: Perform MD5 (returns 'md5_hash' variable)
  import_role:
    name: file_operations
    tasks_from: md5

- name: Verify remote MD5 is correct
  assert:
    that:
      - md5_hash == primary_image.md5
    fail_msg: "MD5-hash on remote device is not correct {{ md5_hash }} != {{ primary_image.md5 }}"
    success_msg: "MD5-hash on remote device is correct!"

!/roles/transfer_image/tasks/verify_space_available.yml

- name: Retrieve space available in bytes (returns 'available_space' variable)
  import_role:
    name: file_operations
    tasks_from: available_space

- name: Verify sufficent space on device to store image file.
  assert:
    that:
      - available_space | int > primary_image.size + extra_space
    success_msg: "{{ dest_filesystem }} has sufficient space for image file."


!/roles/transfer_image/vars/main.yml

image_details:
  name: c1100-universalk9_ias.16.12.03.SPA.bin
  size: 542086804
  md5: ebfcf2f266822f006b9b8ebfef80b217
  # Sanity check to make sure never using wrong image on the wrong model
  supported_models:
    - "C1111-4P"

!/group_vars/cisco.yml

---
backup_dir: "~/CFG_BACKUP"

# Filesystem on remote device must be one of these
allowed_filesystems:
  - "flash:"
  - "bootflash:"

primary_image:
  name: c1100-universalk9_ias.16.12.03.SPA.bin
  size: 542086804
  md5: ebfcf2f266822f006b9b8ebfef80b217
  # Sanity check to make sure never using wrong image on the wrong model
  supported_models:
    - "C1111-4P"

backup_image:
  name: c1100-universalk9_ias.16.08.01.SPA.bin
  size: 427968764
  md5: 8dee04c886aa00ae6c794d7c65f52f9d
  # Sanity check to make sure never using wrong image on the wrong model
  supported_models:
    - "C1111-4P"

# Extra buffer of available space
extra_space: 10000000

* Here we look at the role to perform the upgrade and reload the device

!/roles/upgrade_device/tasks/main.yml

- name: Update to boot settings to use new image file
  import_tasks: update_bootsystem.yml
  tags: bootsystem

- name: Reload the device
  import_tasks: reload_device.yml
  tags: reload

!/roles/upgrade_device/tasks/update_bootsystem.yml

- name: Obtain current 'boot system' values (before changes)
  import_tasks: current_bootsystem.yml

- name: Prompt to continue
  pause: 
    prompt: |
      >>>>>>>>>>>>>>>>>>
      You are about to change the boot variable on the device.
      Press "<cntr-c>" and then "a" to abort.
      Press return to continue.
      >>>>>>>>>>>>>>>>>>
- name: Update 'boot system' to new value
  ios_config:
    lines:
      - no boot system
      - "boot system flash {{ primary_image.name }}"
      # - "boot system flash {{ backup_image.name }}"
    # Always save the changes to startup-config
    save_when: always
    # Force Ansible to always push all of the lines
    match: none
    backup: True

!/roles/upgrade_device/tasks/reload_device.yml

- name: Obtain 'boot system' values (after changes)
  import_tasks: current_bootsystem.yml

- name: Verify file exists and display its size
  ios_command:
    commands: "dir {{ primary_image.name }}"
  register: dir_output

- set_fact:
    dir_output: "{{ dir_output.stdout_lines[0] }}"

- name: Perform MD5 (returns 'md5_hash' variable)
  import_role:
    name: file_operations
    tasks_from: md5

- name: Just the facts
  debug:
    msg:
      - '******************************************************'
      - 'File Exists: {{ dir_output[2] }}'
      - ''
      - 'MD5 Value: {{ md5_hash }}'
      - ''
      - 'Boot Variable: '
      - '-------'
      - '{{ boot_var }}'
      - ''
      - '******************************************************'

- name: Prompt to continue
  pause:
    prompt: |
      >>>>>>>>>>>>>>>>>>
      You are about to reload the device!!! Do you want to continue?
      Press "<cntr-c>" and then "a" to abort.
      Press return to continue.
      >>>>>>>>>>>>>>>>>>
- name: Reload the device.
  ios_command:
    commands:
      - command: reload
        prompt: confirm
        answer: 'y'
  tags: 
    - reload_only

- name: Wait until device completes its reboot
  wait_for:
    host: "{{ ansible_host }}"
    port: 22
    delay: 240
    timeout: 1800
  tags: 
    - reload_only

* Here is the main playbook that is run and calls all the other roles

!upgrade_os.yml

---
- name: OS Upgrade on Cisco IOS-XE devices
  hosts: do_not_run_this_playbook
  gather_facts: True

  roles:
    - upgrade_pre_process
    - transfer_image
    - upgrade_device
    - upgrade_post_process

* Making your own Ansible Python filter

You will want to first create a filter_plugins directory relative to where you execute your playbook. This is where you will store your Python scripts. You will have to have specific boiler plates of a class called FilterModule and define filters under that. 

!/filter_plugins/my_filter.py

def some_filter(my_string):
    return my_string.upper()


class FilterModule(object):
    def filters(self):
        return {"some_filter": some_filter}

!/filter_plugins/my_filter2.py

def another_filter(my_string, arg1, arg2):
    return f"{my_string}...{arg1}...{arg2}"

class FilterModule(object):
    def filters(self):
        return {"another_filter": another_filter}


!Here we have a Playbook that will leverage the Python script we created. 

!my_pb.yml

---
- hosts: local
  tasks:
    - debug:
        msg: "{{ 'Hello world' | some_filter }}"
    
    - debug:
        msg: "{{ 'Hello world' | another_filter('well', 'actually') }}"



* Here is another example that retrieves a show ip interface brief from a device

!/filter_plugins/show_ip_int_br.py

"""
Interface              IP-Address      OK? Method Status                Protocol
GigabitEthernet1       10.0.2.15       YES DHCP   up                    up
GigabitEthernet2       unassigned      YES unset  up                    up
GigabitEthernet3       unassigned      YES unset  up                    up
GigabitEthernet4       unassigned      YES unset  up                    up
GigabitEthernet5       unassigned      YES unset  up                    up
GigabitEthernet6       unassigned      YES unset  up                    up
GigabitEthernet7       unassigned      YES unset  up                    up
"""
import re


def show_ip(output):
    show_version_list = []
    output = output.strip()
    for line in output.splitlines():
        if re.search(r"^Interface.*Protocol$", line, flags=re.M):
            continue
        show_version_list.append(line.split())
    return show_version_list


class FilterModule(object):
    def filters(self):
        return {"show_ip_filter": show_ip}


!/filters/show_ip_int_br.yml

---
- name: Show IP Int Brief
  hosts: cisco5
  gather_facts: False

  tasks:
    - name: Executing command
      ios_command:
        commands: show ip int brief
      register: output

    # I mislabeled this variable 'show_ver' in the video
    - set_fact:
        show_ip: "{{ output.stdout[0] }}"

    - debug:
        msg: "{{ show_ip | show_ip_filter }}"


 * You can also add the python scripts you create in a role and add the filter_plugins directory to that path

 !/roles/my_role/filter_plugins/my_filter.py

 !/filters_role/roles/my_role/tasks/main.yml

 - debug:
    msg: "{{ 'Hello world' | some_filter }}"

- debug:
    msg: "{{ 'Hello world' | another_filter('well', 'actually') }}"

 !/test_filters.yml

 ---
- hosts: local
  roles:
    - my_role

* Creating your own Ansible Module


!/library/test_module.py


def main():

    # Define your modules arguments
    module_args = dict(
        name=dict(type="str", required=True),
        new=dict(type="bool", required=False, default=False),
    )

    # Create an instance of the AnsibleModule class
    module = AnsibleModule(argument_spec=module_args, supports_check_mode=True)

    # Define standard results
    result = dict(changed=False, original_message="Something", message="It worked!!!")

    # Return items as JSON
    module.exit_json(**result)


if __name__ == "__main__":
    main()

!test1.yml

---
- name: Testing a new module
  hosts: local
  tasks:
    - name: Test my module
      test_module:
        name: Hello
        new: True

* Here we have an example of creating a module that will use Netmiko to perform a send command to a device

!/library/netmiko_send_command.py

#!/usr/bin/python

from ansible.module_utils.basic import AnsibleModule

netmiko_found = False
try:
    from netmiko import ConnectHandler

    netmiko_found = True
except ImportError:
    pass


def main():
    # Define your module arguments
    module_args = dict(
        host=dict(type="str", required=True),
        device_type=dict(type="str", required=True),
        username=dict(type="str", required=False),
        password=dict(type="str", required=False, no_log=True),
        command=dict(type="str", required=True),
    )

    # Create an instance of AnsibleModule class
    module = AnsibleModule(argument_spec=module_args)
    result = dict(changed=False, msg="")

    # Ensure Netmiko is installed; exit using JSON (if not).
    if not netmiko_found:
        module.fail_json(msg="The Netmiko library is not installed!")

    # Extract the arguments
    host = module.params["host"]
    device_type = module.params["device_type"]
    username = module.params["username"]
    password = module.params["password"]
    command = module.params["command"]

    net_connect = ConnectHandler(
        host=host, device_type=device_type, username=username, password=password
    )
    output = net_connect.send_command(command)
    result["msg"] = output
    module.exit_json(**result)


if __name__ == "__main__":
    main()

!/test_netmiko.yml

---
- name: Netmiko module
  hosts: cisco
  gather_facts: False
  tasks:
    - name: Netmiko testing
      netmiko_send_command:
        host: "{{ ansible_host }}"
        device_type: cisco_ios
        username: "{{ ansible_user }}"
        password: "{{ ansible_ssh_pass }}"
        command: show ip int brief
