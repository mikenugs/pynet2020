* Dictionaries

Sometimes known as HashMaps in other languages and provides a key/value pair. Lists provide an index# for each element. 

net_dev= {}  <-- empty dictionary

net_dev['ip_addr'] = '1.1.1.1'

or you can do

net_dev = {'ip_addr': '1.1.1.1'}

You can also use a variable for a key

var1 = 'vendor'
net_dev[var1] = 'cisco'

Dictionaries do not keep elements in any particular order

To access a value in the dictionary you can specify the dictionary and key

net_dev['ip_addr']

If you try and access a key that does not exist you will get a KeyError. They are also mutable so they can be modified. 

You can use the .get to return a value of None in the case they key does not exist

net_dev.get('ip_addr')

You can also change the default value in this example we set it to 2.2.2.2

net_dev.get('ip_addr', '2.2.2.2')

You can copy a dictionary using copy

net_dev2 = net_dev.copy()

You can pop out an element and return the value to you so it is no longer in the dictionary but it gives you the value for the key

net_dev.pop('ip_addr')

You can also update key value pairs from one dictionary to the other. The below command will take all the key value pairs from net_dev2 and update the net_dev dictionary with those.

net_dev.update(net_dev2)

To loop over the keys in a dictionary you can do 

for key in net_dev:
     print(key)

To loop over the values in a dictionary you can

for v in net_dev.values():
     print(v)

To loop over they key and values you can do a

for k, v in net_dev.items():
    print(k)
    print(v)

* Sets

Sets are a python data type that is unordered and also unique in that there will be no duplicate elements.

my_ips = ['1.1.1.1', '2.2.2.2', '3.3.3.3', '4.4.4.4', '1.1.1.1']

set(my_ips)
{'1.1.1.1', '2.2.2.2', '3.3.3.3', '4.4.4.4'}

A set union will compare two different sets and only show what is unique to those sets

my_ips | my_ips2
OR
my_ips.union(my_ips2)

If you want what is common to both sets then you can perform the following called an intersection

my_ips & my_ips2
OR
my_ips.intersection(my_ips2)

You can also remove anything that is duplicate from the second set and keep anything that is unique on the first set by doing a difference

my_ips - my_ips2
OR
my_ips.difference(my_ips2)

You can also do a symmetric differences that will only give you unique things on each of the sets. It only removes the common things between the sets.

my_ips ^ my_ips2
OR
my_ips.symmetric_difference(my_ips2)

* Exceptions

You can use try/except to catch errors in your code. In the below program the dictionary is empto so we get a key error. We create an except for the key error and then execute the code in that block instead of the code in the try block.

my_dict = {}

try:
    print('Statement before')
    my_dict['ip_addr']
    print('Statement after')
except KeyError:
    print('Caught exception')

print('After exception')

You can also handle multiple exceptions as well. In the below example we try and access a list index that does not exist as well as a key that does not exist. This will work if you hit both errors or if any of just one of the errors. 

my_dict = {}
my_list = []
try:
    my_list[0]
    my_dict['ip_addr']
except (KeyError, IndexError):
    print("Handling multiple potential exceptions")

You can also split up the except statements on the two different errors

except (KeyError):
    print("Handling multiple potential exceptions")
except (IndexError):
    print("Do something else")

The finally clause executes wether we get an exception or not

my_dict = {}

try:
    print('Statement before')
    my_dict['ip_addr']
    print('Statement after')
except KeyError:
    print('Caught exception')
finally:
     print('This is always executed, exception or not')

You can also catch any exception even if you do not know what exception error you are about to get by using the Exception with except

my_dict = {}

try:
    print('Statement before')
    my_dict['ip_addr']
    print('Statement after')
except Exception:
    print('Caught exception')

* ReGex

In the below example we search the string ip_addr based on the pattern to the left


ip_addr = '       10.1.1.1     '

import re

re.search(r".", ip_addr)

To see what you matched inits entirety

re.search(r".", ip_addr).group(0)

If you want to cut the output so in this example it only has the IP's without the whitespace. The regex between the () will be group1 and the regex before will be group(0). The r" that we use in the RegEx makes it a raw string which is needed because Python typically looks at things with \ for example and ignores that with raw strings. 

re.search(r"^s+(\S+)", ip_addr).group(1)


Here we open up a file that has a show version from a Cisco. We then take that output and save it as a string called output. Then we take the string and create a list called show_ver with each line being an element in the list. 

with open("show_version.txt") as f:
    output = f.read()

show_ver = output.splitlines()

Here we take the first line in the list and name it line

line = show_ver[0]

Here wre go through that first line and match just the portion in the line that matched 15.4T. Since that part of our RegEx is between () it will show up in group(1)

re.search(r"^Cisco.*, Version (\S+),.*$", line).group(1)

You can also save this value that is in the group within into a dictionary type data format by using ?P<NAME_OF_KEY> between the () of the RegEx we are matching.

re.search(r"^Cisco.*, Version (?P<serial_num>\S+),.*$", line).groupdict()
{'serial_num': '15.4(2)T1'}

OR

match = re.search(r"^Cisco.*, Version (?P<serial_num>\S+),.*$", line)
match.groupdict()
{'serial_num': '15.4(2)T1'}

In the below example the .* is greedy and matches the rest of the line. 

re.search(r"^Cisco.* (.*), " line)

In our example from above our text has two , and it will match all the way to the second since regex acts greedy by default. To make it not act greedy we can use a ? in our regex so it is less greedy and only matches to the first comma. 

re.search(r"^Cisco.* (.*?), " line)

If we had a large string and we only wanted to match something that was in the middle of the string. Here we look for processor board at the middle of the string and match the value that shows up after that in parantesis. The $ takes it to the end. Since the processor board is in the middle and we are using ^ to anchor we can specify a flag with regex called re.M which makes it multiline and it will search each line for that pattern.


serial_num = re.search(r"^Processor board ID (.*)$", output, flags=re.M).group(1)

By default the .* will not cross a newline so this below Regex will just get Cisco from the first line and everything after. You can change this behavior by using the flag re.DOTALL. 

re.search(r"^Cisco.*, output, flags=re.DOTALL).group(0)

There is also a flag called re.I which will ignore capitilization

re.search(r"^Cisco.*, output, flags=re.I).group(0)

Instead of doing a split on a string you can also do a regex split as well. 

re.split(r"^------------.*$", output, flags=re.M)

This will return a list for everything in output and will also capture the data that is between the two lines that have -------------. To see what it captured you can do a 

re.split(r"^------------.*$", output, flags=re.M)[1]

You can also use RegEx to make replacements as well. Here we replace ----- with #### Whatever.

new_output = re.sub(r"^------------.*$", '######## WHATEVER ########', output, flags=re.M)

If you wanted to search through a large string which have a ton of e-mail addresses and pull up all of the e-mail addresses you can use the re.findall