* Netmiko Handling prompts

When deleting files in IOS you can get a prompt to confirm that you need to type yes or hit enter and not a router prompt that Netmiko is expecting. You can call these multiline commands if they have prompting like this

from netmiko import ConnectHandler
from getpass import getpass

device1 = {
    "host": "cisco3.lasthop.io",
    "username": "pyclass",
    "password": getpass(),
    "device_type": "cisco_ios",
}

net_connect = ConnectHandler(**device1)
print(net_connect.find_prompt())

command = "delete flash:/cisco_file.txt"
output = net_connect.send_command(
    command, expect_string=r"Delete filename", strip_prompt=False, strip_command=False
)
output = net_connect.send_command(
    "\n", expect_string=r"confirm", strip_prompt=False, strip_command=False
)
output = net_connect.send_command(
    "y", expect_string=r"#", strip_prompt=False, strip_command=False
)
print(output)
net_connect.disconnect()

You can also use send_command_timing which will just wait long enough to determine if the command is done as apposed to expecting a prompt. 

from netmiko import ConnectHandler
from getpass import getpass

device1 = {
    "host": "cisco3.lasthop.io",
    "username": "pyclass",
    "password": getpass(),
    "device_type": "cisco_ios",
}

net_connect = ConnectHandler(**device1)
print(net_connect.find_prompt())

command = "delete flash:/cisco_file.txt"
output = net_connect.send_command_timing(
    command, strip_prompt=False, strip_command=False
)
output = net_connect.send_command_timing("y", strip_prompt=False, strip_command=False)
print(output)
net_connect.disconnect()

There are issues when doing screen scrapping and knowing when a command is done. NetMiko can use global_delay_factor in connect handler which will be a multiplier so setting it to 2 will double 4 will quadrouple and so on. 

device1 = {
    "host": "cisco3.lasthop.io",
    "username": "pyclass",
    "password": getpass(),
    "device_type": "cisco_ios",
    "global_delay_factor": 2,    <----- Set here
}

You can alternatively use delay_factor with send_command and doing that will only slow down the process of send_command and not for logging in or anything else. If you specify both global_delay_factor and delay_factor NetMiko will take the larger delay of the two and use that. 

output = net_connect.send_command("show ip int brief", delay_factor=2)

* Netmiko and TextFSM

Ideally you want structured data back when using screen scrapping. You can use Regex for this or Napalm which has Getters to provide structured data. With TextFSM you can also get structured data back from your commands.

To get the NTC TextFSM templates
git clone https://github.com/networktocode/ntc-templates.git

To see what is available
cd ~/ntc-templates
cd ~/templates
ls
ls index

You can also set an environmental variable so Netmiko can find the templates
export NET_TEXTFSM=/path/to/ntc-templates/templates/

To use textFSM with Netmiko you can
output = net_connect.send_command("show ip int brief", use_textfsm=True)

To pretty print the textFSM data
from pprint import pprint
pprint(output)

* NetMiko config changes

You can send configuration changes directly to the device either via string or a list of commands by using the below two commands

cfg = "logging buffered 20000"
output = net_connect.send_config_set(cfg)

You can also send changes via a text file as well below we have the same file
my_changes.txt
    logging buffered 10000
    no logging console
    clock timezone PST -8 0

And here is what you will want to add to reference the file. 

output = net_connect.send_config_from_file(config_file="my_changes.txt")
print(output)

* Secure Copying files over

Using NetMiko to secure copy files over it will automatically check to make sure you have sufficiant space prior to copying the file over. It will also check wether the file already exists so you need to tell NetMiko if you want it to overwrite an existing file. It also has a built in md5 which will compare it with the source and dest file to make sure the destination md5 matches the source. It also is idempotent so it check to see if the dest file exists and the md5 matches and will only run if needed. Make sure your timeout is set to a high interval if you are copying large files so it does not time out. 

source_file = "testx.txt"
dest_file = "testx.txt"
direction = "put"
file_system = "bootflash:"

# Create the Netmiko SSH connection
ssh_conn = ConnectHandler(**nxos1)
transfer_dict = file_transfer(
    ssh_conn,
    source_file=source_file,
    dest_file=dest_file,
    file_system=file_system,
    direction=direction,
    overwrite_file=True,
)
print(transfer_dict)

* Saving a configuration

This is the same as performing a write mem and can be performed on various platforms. 

save_out = net_connect.save_config()

* Using SSH keys to access devices

from netmiko import ConnectHandler

device1 = {
    "device_type": "cisco_ios",
    "host": "cisco1.lasthop.io",
    "username": "testuser",
    "use_keys": True,                         <-- must specify use keys
    "key_file": "/home/kbyers/.ssh/test_rsa", <-- private key to access device
}

net_connect = ConnectHandler(**device1)
print(net_connect.find_prompt())
net_connect.disconnect()

* Speeding up NetMiko process

By using fast_cli this will change global_delay_factor to less than 1 and take the lesser of global_delay_factor and delay factor. 

device1 = {
    "device_type": "cisco_ios",
    "host": "cisco1.lasthop.io",
    "username": "testuser",
    "use_keys": True,
    "key_file": "/home/kbyers/.ssh/test_rsa",
    "fast_cli": True,                         <--- Specify Fast CLI here
}

* You can see what methods are available by doing a dir on the NetMiko object
dir(net_connect)

* You can also do a help to find out more detailed information for these methods
help(net_connect.config_mode)

* Using Telnet instead of SSH

device1 = {
    "host": "cisco1.lasthop.io",
    "username": "pyclass",
    "password": getpass(),
    "device_type": "cisco_ios_telnet", <--- specify Telnet here
}

* To see how long it takes a script to run

date; python script.py; date